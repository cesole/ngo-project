{"changed":true,"filter":false,"title":"views.py","tooltip":"/community/views.py","value":"from django.shortcuts import render, get_object_or_404, redirect\nfrom django.utils import timezone\nfrom .models import Post\nfrom django.http import HttpResponseForbidden, HttpResponse\nfrom .forms import BlogPostForm\n\n\ndef get_posts(request):\n    \"\"\"\n    Create a view that will return a list\n    of Posts that were published prior to 'now'\n    and render them to the 'blogposts.html' template\n    \"\"\"\n    posts = Post.objects.filter(published_date__lte=timezone.now()\n        ).order_by('-published_date')\n    return render(request, \"blogposts.html\", {'posts': posts})\n\n\ndef post_detail(request, pk):\n    \"\"\"\n    Create a view that returns a single\n    Post object based on the post ID (pk) and\n    render it to the 'postdetail.html' template.\n    Or return a 404 error if the post is\n    not found\n    \"\"\"\n    post = get_object_or_404(Post, pk=pk)\n    post.save()\n    return render(request, \"postdetail.html\", {'post': post})\n\n\ndef create_or_edit_post(request, pk=None):\n    \"\"\"\n    Create a view that allows us to create\n    or edit a post depending if the Post ID\n    is null or not\n    \"\"\"\n    if not request.user.is_authenticated:\n        return redirect('login')\n    else:\n        if (request.user.is_superuser):\n            post = get_object_or_404(Post, pk=pk) if pk else None\n            if request.method == \"POST\":\n                form = BlogPostForm(request.POST, request.FILES, instance=post)\n                if form.is_valid():\n                    post = form.save()\n                    return redirect(post_detail, post.pk)\n            else:\n                form = BlogPostForm(instance=post)\n        \n    return render(request, 'blogpostform.html', {'form': form})","undoManager":{"mark":1,"position":-1,"stack":[[{"start":{"row":50,"column":33},"end":{"row":50,"column":34},"action":"insert","lines":["c"],"id":2}],[{"start":{"row":50,"column":28},"end":{"row":50,"column":40},"action":"remove","lines":["blogpostform"],"id":2},{"start":{"row":50,"column":28},"end":{"row":50,"column":29},"action":"insert","lines":["c"]},{"start":{"row":50,"column":29},"end":{"row":50,"column":30},"action":"insert","lines":["o"]},{"start":{"row":50,"column":30},"end":{"row":50,"column":31},"action":"insert","lines":["n"]},{"start":{"row":50,"column":31},"end":{"row":50,"column":32},"action":"insert","lines":["t"]},{"start":{"row":50,"column":32},"end":{"row":50,"column":33},"action":"insert","lines":["a"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":19,"column":7},"end":{"row":19,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":23,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1572883489700}